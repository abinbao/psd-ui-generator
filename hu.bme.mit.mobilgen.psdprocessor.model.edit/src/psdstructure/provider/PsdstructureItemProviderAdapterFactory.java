/**
 */
package psdstructure.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import psdstructure.util.PsdstructureAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PsdstructureItemProviderAdapterFactory extends PsdstructureAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PsdstructureItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Vector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VectorItemProvider vectorItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Vector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVectorAdapter() {
		if (vectorItemProvider == null) {
			vectorItemProvider = new VectorItemProvider(this);
		}

		return vectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.ViewGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewGroupItemProvider viewGroupItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.ViewGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewGroupAdapter() {
		if (viewGroupItemProvider == null) {
			viewGroupItemProvider = new ViewGroupItemProvider(this);
		}

		return viewGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.BackgroundImage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BackgroundImageItemProvider backgroundImageItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.BackgroundImage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBackgroundImageAdapter() {
		if (backgroundImageItemProvider == null) {
			backgroundImageItemProvider = new BackgroundImageItemProvider(this);
		}

		return backgroundImageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Grid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GridItemProvider gridItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Grid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGridAdapter() {
		if (gridItemProvider == null) {
			gridItemProvider = new GridItemProvider(this);
		}

		return gridItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Scroll} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrollItemProvider scrollItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Scroll}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrollAdapter() {
		if (scrollItemProvider == null) {
			scrollItemProvider = new ScrollItemProvider(this);
		}

		return scrollItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.ProgressSpinner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgressSpinnerItemProvider progressSpinnerItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.ProgressSpinner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgressSpinnerAdapter() {
		if (progressSpinnerItemProvider == null) {
			progressSpinnerItemProvider = new ProgressSpinnerItemProvider(this);
		}

		return progressSpinnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Select} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectItemProvider selectItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Select}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectAdapter() {
		if (selectItemProvider == null) {
			selectItemProvider = new SelectItemProvider(this);
		}

		return selectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.ProgressBar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgressBarItemProvider progressBarItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.ProgressBar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgressBarAdapter() {
		if (progressBarItemProvider == null) {
			progressBarItemProvider = new ProgressBarItemProvider(this);
		}

		return progressBarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.WebView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebViewItemProvider webViewItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.WebView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebViewAdapter() {
		if (webViewItemProvider == null) {
			webViewItemProvider = new WebViewItemProvider(this);
		}

		return webViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.DatePicker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatePickerItemProvider datePickerItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.DatePicker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatePickerAdapter() {
		if (datePickerItemProvider == null) {
			datePickerItemProvider = new DatePickerItemProvider(this);
		}

		return datePickerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Slider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SliderItemProvider sliderItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Slider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSliderAdapter() {
		if (sliderItemProvider == null) {
			sliderItemProvider = new SliderItemProvider(this);
		}

		return sliderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Switch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchItemProvider switchItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Switch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchAdapter() {
		if (switchItemProvider == null) {
			switchItemProvider = new SwitchItemProvider(this);
		}

		return switchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Checkbox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckboxItemProvider checkboxItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Checkbox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckboxAdapter() {
		if (checkboxItemProvider == null) {
			checkboxItemProvider = new CheckboxItemProvider(this);
		}

		return checkboxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.Map} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapItemProvider mapItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.Map}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapAdapter() {
		if (mapItemProvider == null) {
			mapItemProvider = new MapItemProvider(this);
		}

		return mapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.RadioButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadioButtonItemProvider radioButtonItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.RadioButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadioButtonAdapter() {
		if (radioButtonItemProvider == null) {
			radioButtonItemProvider = new RadioButtonItemProvider(this);
		}

		return radioButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.AdView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdViewItemProvider adViewItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.AdView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdViewAdapter() {
		if (adViewItemProvider == null) {
			adViewItemProvider = new AdViewItemProvider(this);
		}

		return adViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link psdstructure.SelectOption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectOptionItemProvider selectOptionItemProvider;

	/**
	 * This creates an adapter for a {@link psdstructure.SelectOption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectOptionAdapter() {
		if (selectOptionItemProvider == null) {
			selectOptionItemProvider = new SelectOptionItemProvider(this);
		}

		return selectOptionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (vectorItemProvider != null) vectorItemProvider.dispose();
		if (viewGroupItemProvider != null) viewGroupItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (backgroundImageItemProvider != null) backgroundImageItemProvider.dispose();
		if (gridItemProvider != null) gridItemProvider.dispose();
		if (scrollItemProvider != null) scrollItemProvider.dispose();
		if (progressSpinnerItemProvider != null) progressSpinnerItemProvider.dispose();
		if (imageItemProvider != null) imageItemProvider.dispose();
		if (textItemProvider != null) textItemProvider.dispose();
		if (selectItemProvider != null) selectItemProvider.dispose();
		if (progressBarItemProvider != null) progressBarItemProvider.dispose();
		if (webViewItemProvider != null) webViewItemProvider.dispose();
		if (datePickerItemProvider != null) datePickerItemProvider.dispose();
		if (sliderItemProvider != null) sliderItemProvider.dispose();
		if (switchItemProvider != null) switchItemProvider.dispose();
		if (checkboxItemProvider != null) checkboxItemProvider.dispose();
		if (mapItemProvider != null) mapItemProvider.dispose();
		if (radioButtonItemProvider != null) radioButtonItemProvider.dispose();
		if (adViewItemProvider != null) adViewItemProvider.dispose();
		if (selectOptionItemProvider != null) selectOptionItemProvider.dispose();
	}

}
